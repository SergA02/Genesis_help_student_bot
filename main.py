import logging
import sqlite3 # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ sqlite3 –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –∑–¥–µ—Å—å
import os      # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º os –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—É—Ç—è–º–∏

from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from decouple import config

# --- –ù–∞—á–∞–ª–æ: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—É—Ç–∏ –∫ –ë–î –¥–ª—è Railway Volume ---
VOLUME_MOUNT_PATH = '/data'  # –≠—Ç–æ –ø—É—Ç—å, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —É–∫–∞–∑—ã–≤–∞–µ—Ç–µ –≤ Railway Volumes
DB_FILENAME = 'bot.db'       # –ò–º—è –≤–∞—à–µ–≥–æ —Ñ–∞–π–ª–∞ –ë–î
DB_PATH = os.path.join(VOLUME_MOUNT_PATH, DB_FILENAME) # –ü–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –ë–î

# –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è Volume —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (Railway –µ–µ —Å–æ–∑–¥–∞–µ—Ç, –Ω–æ –ª—É—á—à–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å)
# os.makedirs —Å–æ–∑–¥–∞—Å—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç, –∏ –Ω–µ –≤—ã–¥–∞—Å—Ç –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ —É–∂–µ –µ—Å—Ç—å
os.makedirs(VOLUME_MOUNT_PATH, exist_ok=True)
logging.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {DB_PATH}")
# --- –ö–æ–Ω–µ—Ü: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—É—Ç–∏ –∫ –ë–î ---


API_TOKEN = config('TOKEN')
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ MemoryStorage
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# database.py (—Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–µ–ø–µ—Ä—å –≤–Ω—É—Ç—Ä–∏ main.py)

def create_tables():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø—É—Ç–∏ –∏–∑ Volume"""
    conn = None
    try:
        # ---- –ò–ó–ú–ï–ù–ï–ù–û ----
        # –£–î–ê–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–π –ë–î. –ù–∞–º –Ω—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –¥–∞–Ω–Ω—ã–µ!
        # if os.path.exists(DB_PATH):
        #     try:
        #         os.remove(DB_PATH) # –ù–ï –£–î–ê–õ–Ø–¢–¨ –ë–î –ü–†–ò –ö–ê–ñ–î–û–ú –ó–ê–ü–£–°–ö–ï!
        #         logging.info("–°—Ç–∞—Ä–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É–¥–∞–ª–µ–Ω–∞.")
        #     except PermissionError:
        #         logging.error("–û—à–∏–±–∫–∞: –§–∞–π–ª bot.db –∑–∞–Ω—è—Ç...")
        #         return

        # ---- –ò–ó–ú–ï–ù–ï–ù–û ----
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º DB_PATH –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()

        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É users —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º chat_id
        # (IF NOT EXISTS –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü—ã —É–∂–µ —Å–æ–∑–¥–∞–Ω—ã)
        cursor.execute('''CREATE TABLE IF NOT EXISTS users (
                          id INTEGER PRIMARY KEY,
                          first_name TEXT,
                          last_name TEXT,
                          username TEXT,
                          chat_id INTEGER UNIQUE)''')

        # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ test_results
        cursor.execute('''CREATE TABLE IF NOT EXISTS test_results (
                          first_name TEXT,
                          last_name TEXT,
                          username TEXT,
                          result TEXT)''')

        cursor.execute('''CREATE TABLE IF NOT EXISTS subscribers (
                          user_id INTEGER UNIQUE)''') # –î–æ–±–∞–≤–∏–ª UNIQUE, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–µ–π

        cursor.execute('''CREATE TABLE IF NOT EXISTS discounts (
                          id INTEGER PRIMARY KEY,
                          description TEXT,
                          start_date TEXT,
                          end_date TEXT)''')

        conn.commit()
        logging.info("–¢–∞–±–ª–∏—Ü—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã –∏–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç.")
    except sqlite3.Error as e:
        logging.error(f"–û—à–∏–±–∫–∞ SQLite –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü: {e}")
    finally:
        if conn:
            conn.close()

# ... (–û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–ª–∞—Å—Å—ã –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ, –∫–∞–∫ TestStates, catalog_data - –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô) ...
class TestStates(StatesGroup):
    question1 = State()
    question2 = State()
    question3 = State()
    question4 = State()
    question5 = State()
    question6 = State()
    question7 = State()
    question8 = State()
    question9 = State()
    question10 = State()
    question11 = State()

catalog_data = {
    "Android": (
        "üîß –•–æ—á–µ—à—å —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –∂–∏—Ç—å –≤ –∫–∞—Ä–º–∞–Ω–∞—Ö –º–∏–ª–ª–∏–æ–Ω–æ–≤ –ª—é–¥–µ–π?\n\n"
        "–ó–¥–µ—Å—å —Ç—ã –Ω–∞—É—á–∏—à—å—Å—è —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∫—Ä—É—Ç—ã–µ –º–æ–±–∏–ª—å–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è Android ‚Äî –æ—Ç –ø–µ—Ä–≤—ã—Ö —Å—Ç—Ä–æ—á–µ–∫ –∫–æ–¥–∞ –¥–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ Google Play.\n\n"
        "–°—Ç–∞–Ω—å —Ç–µ–º, –∫—Ç–æ –¥–µ–ª–∞–µ—Ç —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –±–ª–∏–∂–µ –∫ –ª—é–¥—è–º!",
        "https://www.instagram.com/genesis.academy.kg/"
    ),
    "UX/UI": (
        "üé® –ü–æ–≥—Ä—É–∑–∏—Å—å –≤ –º–∏—Ä –¥–∏–∑–∞–π–Ω–∞, –≥–¥–µ –∫—Ä–∞—Å–æ—Ç–∞ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è —Å —É–¥–æ–±—Å—Ç–≤–æ–º!\n\n"
        "–¢—ã –±—É–¥–µ—à—å —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ä–∞–¥—É—é—Ç –≥–ª–∞–∑ –∏ –¥–µ–ª–∞—é—Ç –∂–∏–∑–Ω—å –ø—Ä–æ—â–µ. –û—Ç —Å–∫–µ—Ç—á–µ–π –¥–æ –ø—Ä–æ—Ç–æ—Ç–∏–ø–æ–≤ ‚Äî —Ç–≤–æ—ë —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ –∏–∑–º–µ–Ω–∏—Ç —Å–ø–æ—Å–æ–± –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å —Ü–∏—Ñ—Ä–æ–≤—ã–º –º–∏—Ä–æ–º!",
        "https://www.instagram.com/genesis.academy.kg/"
    ),
    "Frontend": (
        "üåê –°—Ç–∞–Ω—å —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º –≤–µ–±-–º–∞–≥–∏–∏!\n\n"
        "–û—Å–≤–æ–π HTML, CSS –∏ JavaScript, —á—Ç–æ–±—ã –æ–∂–∏–≤–ª—è—Ç—å —Å–∞–π—Ç—ã –∏ –¥–µ–ª–∞—Ç—å –∏—Ö —É–¥–æ–±–Ω—ã–º–∏ –Ω–∞ –ª—é–±–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ. –ö–∞–∂–¥—ã–π –∫–ª–∏–∫ –∏ –∫–∞–∂–¥–∞—è –∞–Ω–∏–º–∞—Ü–∏—è ‚Äî —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–≤–æ–µ–π —Ä–∞–±–æ—Ç—ã, –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!",
        "https://www.instagram.com/genesis.academy.kg/"
    ),
    "Backend": (
        "üõ† –ó–∞–≥–ª—è–Ω–∏ –∑–∞ –∫—É–ª–∏—Å—ã –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞!\n\n"
        "–ó–¥–µ—Å—å —Ç—ã –Ω–∞—É—á–∏—à—å—Å—è —Å—Ç—Ä–æ–∏—Ç—å –º–æ—â–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç —Ä–∞–±–æ—Ç—É –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π. –î–∞–Ω–Ω—ã–µ, –ª–æ–≥–∏–∫–∞, –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å ‚Äî —Å—Ç–∞–Ω—å –Ω–µ–≤–∏–¥–∏–º—ã–º –≥–µ—Ä–æ–µ–º, –¥–µ—Ä–∂–∞—â–∏–º –≤—Å—ë –Ω–∞ –ø–ª–∞–≤—É!",
        "https://www.instagram.com/genesis.academy.kg/"
    ),
    "FullStack": (
        "üíª –•–æ—á–µ—à—å —É–º–µ—Ç—å –≤—Å—ë? –≠—Ç–æ —Ç–≤–æ–π –ø—É—Ç—å!\n\n"
        "–û—Å–≤–æ–π –∫–∞–∫ –∫–ª–∏–µ–Ω—Ç—Å–∫—É—é (Frontend), —Ç–∞–∫ –∏ —Å–µ—Ä–≤–µ—Ä–Ω—É—é (Backend) —á–∞—Å—Ç—å, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –æ—Ç –ê –¥–æ –Ø. –ë—É–¥—å —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–º –º–∞—Å—Ç–µ—Ä–æ–º, –≥–æ—Ç–æ–≤—ã–º –≤–æ–ø–ª–æ—Ç–∏—Ç—å –ª—é–±—É—é –∏–¥–µ—é –≤ –∂–∏–∑–Ω—å!",
        "https://www.instagram.com/genesis.academy.kg/"
    )
}


# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    user = message.from_user
    # ---- –ò–ó–ú–ï–ù–ï–ù–û ----
    conn = sqlite3.connect(DB_PATH) # –ò—Å–ø–æ–ª—å–∑—É–µ–º DB_PATH
    cursor = conn.cursor()
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º INSERT OR IGNORE —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –¥—É–±–ª–∏–∫–∞—Ç–µ chat_id
        cursor.execute(
            "INSERT OR IGNORE INTO users (first_name, last_name, username, chat_id) VALUES (?, ?, ?, ?)",
            (user.first_name, user.last_name, user.username, message.chat.id)
        )
        conn.commit()
    except sqlite3.Error as e:
         logging.error(f"–û—à–∏–±–∫–∞ SQLite –≤ /start: {e}")
    finally:
        conn.close()

    await message.reply(
        "üåü –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä –∫—Ä—É—Ç—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π! üåü –Ø —Ç–≤–æ–π –≤–µ—Ä–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫, –≥–æ—Ç–æ–≤—ã–π –ø–æ–º–æ—á—å –≤—ã–±—Ä–∞—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—É—á–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ —Ä–∞—Å–∫—Ä–æ–µ—Ç —Ç–≤–æ–π —Ç–∞–ª–∞–Ω—Ç –∏ –ø—Ä–∏–≤–µ–¥—ë—Ç –∫ —É—Å–ø–µ—Ö—É!\n\n"
        "üöÄ –í–æ—Ç —á—Ç–æ —è –º–æ–≥—É –¥–ª—è —Ç–µ–±—è:\n"
        "- –ü—Ä–æ–π–¥–∏ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π /test, —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å, –∫–∞–∫–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–±–µ –±–ª–∏–∂–µ –≤—Å–µ–≥–æ.\n"
        "- –ó–∞–≥–ª—è–Ω–∏ –≤ –Ω–∞—à /catalog ‚Äî —Ç–∞–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –∂–¥—É—Ç —Ç–µ–±—è!\n"
        "- –•–æ—á–µ—à—å –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ –≤—Å–µ—Ö –Ω–æ–≤–∏–Ω–æ–∫? –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ /subscribe –∏ –ø–æ–ª—É—á–∞–π –Ω–æ–≤–æ—Å—Ç–∏ –æ –∫—É—Ä—Å–∞—Ö, –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö –∏ —Å–∫–∏–¥–∫–∞—Ö –ø—Ä—è–º–æ –≤ —á–∞—Ç.\n"
        "- –ï—Å–ª–∏ –Ω–∞–¥–æ–µ–ª–æ –ø–æ–ª—É—á–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è /unsubscribe.\n"
        "- –£–∑–Ω–∞–π –æ —Ç–µ–∫—É—â–∏—Ö /discounts –∏ —Ö–≤–∞—Ç–∞–π –ª—É—á—à–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è!"
    )

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥—ã /test (q1 - q10) ---
# –í —ç—Ç–∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö –Ω–µ—Ç –ø—Ä—è–º–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ë–î, –ø–æ—ç—Ç–æ–º—É –æ–Ω–∏ –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô
# (–∫–æ–¥ –¥–ª—è q1 - q10 –æ–ø—É—â–µ–Ω –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏, –æ–Ω –æ—Å—Ç–∞–µ—Ç—Å—è —Ç–∞–∫–∏–º –∂–µ)
@dp.message_handler(commands=['test'])
async def start_test(message: types.Message):
    await TestStates.question1.set()
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        types.InlineKeyboardButton(text="a) –ú–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è, –∫–æ–≥–¥–∞ –≤—Å—ë –∫—Ä–∞—Å–∏–≤–æ –∏ —É–¥–æ–±–Ω–æ üòä", callback_data="q1_a"),
        types.InlineKeyboardButton(text="b) –Ø –ª—é–±–ª—é —Ä–∞–∑–±–∏—Ä–∞—Ç—å—Å—è, –∫–∞–∫ –≤—Å—ë —É—Å—Ç—Ä–æ–µ–Ω–æ –≤–Ω—É—Ç—Ä–∏ üßê", callback_data="q1_b"),
        types.InlineKeyboardButton(text="c) –ú–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è, –∫–æ–≥–¥–∞ –≤—Å—ë –ø—Ä–æ—Å—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç ‚öôÔ∏è", callback_data="q1_c"),
        types.InlineKeyboardButton(text="d) –ú–Ω–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ, –∫–∞–∫ –¥–µ–ª–∞—é—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ üì±", callback_data="q1_d")
    )
    await message.reply("–í–æ–ø—Ä–æ—Å 1: –ß—Ç–æ —Ç–µ–±–µ –±–ª–∏–∂–µ? ü§î", reply_markup=keyboard)

@dp.callback_query_handler(lambda c: c.data.startswith("q1_"), state=TestStates.question1)
async def process_q1(callback_query: types.CallbackQuery, state: FSMContext):
    answer = callback_query.data.split("_")[1]
    async with state.proxy() as data:
        data['q1'] = answer
    await TestStates.next()
    # ... –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –¥–ª—è q1 -> q2 ...
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        types.InlineKeyboardButton(text="a) –ü—Ä–∏–¥—É–º—ã–≤–∞—Ç—å, –∫–∞–∫ –æ–Ω –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å üé®", callback_data="q2_a"),
        types.InlineKeyboardButton(text="b) –ù–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å, —á—Ç–æ–±—ã –≤—Å—ë —Ä–∞–±–æ—Ç–∞–ª–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ üîß", callback_data="q2_b"),
        types.InlineKeyboardButton(text="c) –î–µ–ª–∞—Ç—å —Ç–∞–∫, —á—Ç–æ–±—ã –∏–º –±—ã–ª–æ —É–¥–æ–±–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è üñ•Ô∏è", callback_data="q2_c"),
        types.InlineKeyboardButton(text="d) –î–µ–ª–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –º–æ–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω üì≤", callback_data="q2_d")
    )
    await bot.send_message(callback_query.from_user.id,
                           "–í–æ–ø—Ä–æ—Å 2: –ü—Ä–µ–¥—Å—Ç–∞–≤—å, —á—Ç–æ —Ç—ã —Å–æ–∑–¥–∞—ë—à—å –ø—Ä–æ–¥—É–∫—Ç. –ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –¥–µ–ª–∞—Ç—å? ü§©",
                           reply_markup=keyboard)
    await callback_query.answer()


@dp.callback_query_handler(lambda c: c.data.startswith("q2_"), state=TestStates.question2)
async def process_q2(callback_query: types.CallbackQuery, state: FSMContext):
    answer = callback_query.data.split("_")[1]
    async with state.proxy() as data:
        data['q2'] = answer
    await TestStates.next()
    # ... –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –¥–ª—è q2 -> q3 ...
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        types.InlineKeyboardButton(text="a) –û—á–µ–Ω—å –Ω—Ä–∞–≤–∏—Ç—Å—è! üòç", callback_data="q3_a"),
        types.InlineKeyboardButton(text="b) –ò–Ω–æ–≥–¥–∞, –ø–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—é ü§î", callback_data="q3_b"),
        types.InlineKeyboardButton(text="c) –ù–µ –æ—Å–æ–±–æ, –º–Ω–µ –±–æ–ª—å—à–µ –Ω—Ä–∞–≤–∏—Ç—Å—è –ª–æ–≥–∏–∫–∞ ü§ì", callback_data="q3_c"),
        types.InlineKeyboardButton(text="d) –Ø –±–æ–ª—å—à–µ –ª—é–±–ª—é –¥–µ–ª–∞—Ç—å —á—Ç–æ-—Ç–æ –ø–æ–ª–µ–∑–Ω–æ–µ, —á–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ üëç", callback_data="q3_d")
    )
    await bot.send_message(callback_query.from_user.id,
                           "–í–æ–ø—Ä–æ—Å 3: –ù–∞—Å–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –Ω—Ä–∞–≤–∏—Ç—Å—è —Ä–∏—Å–æ–≤–∞—Ç—å –∏–ª–∏ –æ—Ñ–æ—Ä–º–ª—è—Ç—å —á—Ç–æ-—Ç–æ? üé®",
                           reply_markup=keyboard)
    await callback_query.answer()

@dp.callback_query_handler(lambda c: c.data.startswith("q3_"), state=TestStates.question3)
async def process_q3(callback_query: types.CallbackQuery, state: FSMContext):
    answer = callback_query.data.split("_")[1]
    async with state.proxy() as data:
        data['q3'] = answer
    await TestStates.next()
    # ... –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –¥–ª—è q3 -> q4 ...
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        types.InlineKeyboardButton(text="a) –ö–æ–º–ø—å—é—Ç–µ—Ä –∏ —Å–∞–π—Ç—ã üñ•Ô∏è", callback_data="q4_a"),
        types.InlineKeyboardButton(text="b) –¢–µ–ª–µ—Ñ–æ–Ω –∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è üì±", callback_data="q4_b"),
        types.InlineKeyboardButton(text="c) –í—Å—ë, –≥–¥–µ –º–æ–∂–Ω–æ —á—Ç–æ-—Ç–æ –ø—Ä–∏–¥—É–º–∞—Ç—å –∏ –∫—Ä–∞—Å–∏–≤–æ –æ—Ñ–æ—Ä–º–∏—Ç—å üåü", callback_data="q4_c"),
        types.InlineKeyboardButton(text="d) –ù–µ –≤–∞–∂–Ω–æ ‚Äî –≥–ª–∞–≤–Ω–æ–µ, —á—Ç–æ–±—ã —Ä–∞–±–æ—Ç–∞–ª–æ –±—ã—Å—Ç—Ä–æ –∏ —á—ë—Ç–∫–æ ‚ö°", callback_data="q4_d")
    )
    await bot.send_message(callback_query.from_user.id,
                           "–í–æ–ø—Ä–æ—Å 4: –ö–∞–∫–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–µ–µ –≤—Å–µ–≥–æ? ü§ñ",
                           reply_markup=keyboard)
    await callback_query.answer()

@dp.callback_query_handler(lambda c: c.data.startswith("q4_"), state=TestStates.question4)
async def process_q4(callback_query: types.CallbackQuery, state: FSMContext):
    answer = callback_query.data.split("_")[1]
    async with state.proxy() as data:
        data['q4'] = answer
    await TestStates.next()
    # ... –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –¥–ª—è q4 -> q5 ...
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        types.InlineKeyboardButton(text="a) –Ø –≤–∏–∑—É–∞–ª ‚Äî –ª—é–±–ª—é, –∫–æ–≥–¥–∞ –≤—Å—ë –∫—Ä–∞—Å–∏–≤–æ üé®", callback_data="q5_a"),
        types.InlineKeyboardButton(text="b) –Ø –ª—é–±–ª—é –ª–æ–≥–∏–∫—É, –ø–æ—Ä—è–¥–æ–∫ –∏ –ø—Ä–∞–≤–∏–ª–∞ üìê", callback_data="q5_b"),
        types.InlineKeyboardButton(text="c) –ú–Ω–µ –≤–∞–∂–Ω–æ, —á—Ç–æ–±—ã –ª—é–¥—è–º –±—ã–ª–æ —É–¥–æ–±–Ω–æ üòä", callback_data="q5_c"),
        types.InlineKeyboardButton(text="d) –ú–Ω–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ, –∫–∞–∫ —Å–æ–∑–¥–∞—é—Ç—Å—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ üì±", callback_data="q5_d")
    )
    await bot.send_message(callback_query.from_user.id,
                           "–í–æ–ø—Ä–æ—Å 5: –ö–∞–∫ —Ç—ã –¥—É–º–∞–µ—à—å, —á—Ç–æ —Ç–µ–±–µ –±–ª–∏–∂–µ –ø–æ –¥—É—Ö—É? üí°",
                           reply_markup=keyboard)
    await callback_query.answer()

@dp.callback_query_handler(lambda c: c.data.startswith("q5_"), state=TestStates.question5)
async def process_q5(callback_query: types.CallbackQuery, state: FSMContext):
    answer = callback_query.data.split("_")[1]
    async with state.proxy() as data:
        data['q5'] = answer
    await TestStates.next()
    # ... –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –¥–ª—è q5 -> q6 ...
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        types.InlineKeyboardButton(text="a) –°–æ–±–∏—Ä–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫–∏, –≤–¥–æ—Ö–Ω–æ–≤–ª—è—Ç—å—Å—è –¥–∏–∑–∞–π–Ω–∞–º–∏ üñºÔ∏è", callback_data="q6_a"),
        types.InlineKeyboardButton(text="b) –†–µ—à–∞—Ç—å –≥–æ–ª–æ–≤–æ–ª–æ–º–∫–∏ –∏ –ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏ üß©", callback_data="q6_b"),
        types.InlineKeyboardButton(text="c) –î—É–º–∞—Ç—å, –∫–∞–∫ —Å–¥–µ–ª–∞—Ç—å —á—Ç–æ-—Ç–æ –ø–æ–Ω—è—Ç–Ω—ã–º –¥–ª—è –¥—Ä—É–≥–∏—Ö ü§î", callback_data="q6_c"),
        types.InlineKeyboardButton(text="d) –ü—Ä–∏–¥—É–º—ã–≤–∞—Ç—å —á—Ç–æ-—Ç–æ –Ω–æ–≤–æ–µ –¥–ª—è —Å–º–∞—Ä—Ç—Ñ–æ–Ω–∞ üì≤", callback_data="q6_d")
    )
    await bot.send_message(callback_query.from_user.id,
                           "–í–æ–ø—Ä–æ—Å 6: –ß—Ç–æ —Ç–µ–±–µ –±–æ–ª—å—à–µ –Ω—Ä–∞–≤–∏—Ç—Å—è? üí≠",
                           reply_markup=keyboard)
    await callback_query.answer()

@dp.callback_query_handler(lambda c: c.data.startswith("q6_"), state=TestStates.question6)
async def process_q6(callback_query: types.CallbackQuery, state: FSMContext):
    answer = callback_query.data.split("_")[1]
    async with state.proxy() as data:
        data['q6'] = answer
    await TestStates.next()
    # ... –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –¥–ª—è q6 -> q7 ...
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        types.InlineKeyboardButton(text="a) –£—á–∏—Ç—å—Å—è —Ä–∏—Å–æ–≤–∞—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã üé®", callback_data="q7_a"),
        types.InlineKeyboardButton(text="b) –£—á–∏—Ç—å—Å—è –ø–∏—Å–∞—Ç—å –∫–æ–¥, —á—Ç–æ–±—ã –≤—Å—ë —Ä–∞–±–æ—Ç–∞–ª–æ üíª", callback_data="q7_b"),
        types.InlineKeyboardButton(text="c) –£—á–∏—Ç—å—Å—è –¥–µ–ª–∞—Ç—å —É–¥–æ–±–Ω—ã–µ —Å–∞–π—Ç—ã üåê", callback_data="q7_c"),
        types.InlineKeyboardButton(text="d) –£—á–∏—Ç—å—Å—è —Å–æ–∑–¥–∞–≤–∞—Ç—å –º–æ–±–∏–ª—å–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è üì±", callback_data="q7_d")
    )
    await bot.send_message(callback_query.from_user.id,
                           "–í–æ–ø—Ä–æ—Å 7: –ï—Å–ª–∏ –±—ã —Ç—ã —É—á–∏–ª—Å—è –Ω–æ–≤–æ–º—É, —á—Ç–æ —Ç–µ–±–µ –±–ª–∏–∂–µ? üìö",
                           reply_markup=keyboard)
    await callback_query.answer()

@dp.callback_query_handler(lambda c: c.data.startswith("q7_"), state=TestStates.question7)
async def process_q7(callback_query: types.CallbackQuery, state: FSMContext):
    answer = callback_query.data.split("_")[1]
    async with state.proxy() as data:
        data['q7'] = answer
    await TestStates.next()
    # ... –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –¥–ª—è q7 -> q8 ...
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        types.InlineKeyboardButton(text="a) –†–∞–±–æ—Ç–∞—Ç—å —Å —Ü–≤–µ—Ç–∞–º–∏, —à—Ä–∏—Ñ—Ç–∞–º–∏ –∏ —Å—Ç–∏–ª—è–º–∏ üåà", callback_data="q8_a"),
        types.InlineKeyboardButton(text="b) –ù–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å, —á—Ç–æ–±—ã –≤—Å—ë —Ä–∞–±–æ—Ç–∞–ª–æ –±–µ–∑ –æ—à–∏–±–æ–∫ üîß", callback_data="q8_b"),
        types.InlineKeyboardButton(text="c) –°–æ–∑–¥–∞–≤–∞—Ç—å —Ç–æ, —á—Ç–æ –≤–∏–¥–∏—Ç –∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å üëÄ", callback_data="q8_c"),
        types.InlineKeyboardButton(text="d) –î–µ–ª–∞—Ç—å —Ç–æ, —á—Ç–æ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ üì≤", callback_data="q8_d")
    )
    await bot.send_message(callback_query.from_user.id,
                           "–í–æ–ø—Ä–æ—Å 8: –ü—Ä–µ–¥—Å—Ç–∞–≤—å, —á—Ç–æ —Ç—ã —Ä–∞–±–æ—Ç–∞–µ—à—å –≤ IT. –ß—Ç–æ —Ç–µ–±–µ –ø—Ä–∏—è—Ç–Ω–µ–µ –¥–µ–ª–∞—Ç—å? ü§©",
                           reply_markup=keyboard)
    await callback_query.answer()

@dp.callback_query_handler(lambda c: c.data.startswith("q8_"), state=TestStates.question8)
async def process_q8(callback_query: types.CallbackQuery, state: FSMContext):
    answer = callback_query.data.split("_")[1]
    async with state.proxy() as data:
        data['q8'] = answer
    await TestStates.next()
    # ... –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –¥–ª—è q8 -> q9 ...
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        types.InlineKeyboardButton(text="a) –ò—Å–∫—É—Å—Å—Ç–≤–æ, —á–µ—Ä—á–µ–Ω–∏–µ üé®", callback_data="q9_a"),
        types.InlineKeyboardButton(text="b) –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞, —Ñ–∏–∑–∏–∫–∞ üî¢", callback_data="q9_b"),
        types.InlineKeyboardButton(text="c) –õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞, –æ–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ üìö", callback_data="q9_c"),
        types.InlineKeyboardButton(text="d) –¢—Ä—É–¥, –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞ üíª", callback_data="q9_d")
    )
    await bot.send_message(callback_query.from_user.id,
                           "–í–æ–ø—Ä–æ—Å 9: –ö–∞–∫–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã –≤ —à–∫–æ–ª–µ —Ç–µ–±–µ –±—ã–ª–∏ –±–ª–∏–∂–µ? üìñ",
                           reply_markup=keyboard)
    await callback_query.answer()

@dp.callback_query_handler(lambda c: c.data.startswith("q9_"), state=TestStates.question9)
async def process_q9(callback_query: types.CallbackQuery, state: FSMContext):
    answer = callback_query.data.split("_")[1]
    async with state.proxy() as data:
        data['q9'] = answer
    await TestStates.next()
    # ... –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –¥–ª—è q9 -> q10 ...
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        types.InlineKeyboardButton(text="a) –ß–µ—Ä–µ–∑ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∏ –ø—Ä–∏–º–µ—Ä—ã üñºÔ∏è", callback_data="q10_a"),
        types.InlineKeyboardButton(text="b) –ü–æ—à–∞–≥–æ–≤–æ, —Å –ª–æ–≥–∏–∫–æ–π üîç", callback_data="q10_b"),
        types.InlineKeyboardButton(text="c) –ü—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏, —á—Ç–æ–±—ã –±—ã–ª–æ –ø–æ–Ω—è—Ç–Ω–æ üó£Ô∏è", callback_data="q10_c"),
        types.InlineKeyboardButton(text="d) –ü–æ–∫–∞–∑—ã–≤–∞—é –ø—Ä—è–º–æ –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ üì±", callback_data="q10_d")
    )
    await bot.send_message(callback_query.from_user.id,
                           "–í–æ–ø—Ä–æ—Å 10: –ö–∞–∫ —Ç—ã –æ–±—ã—á–Ω–æ –æ–±—ä—è—Å–Ω—è–µ—à—å —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–∏–º? üßê",
                           reply_markup=keyboard)
    await callback_query.answer()

@dp.callback_query_handler(lambda c: c.data.startswith("q10_"), state=TestStates.question10)
async def process_q10(callback_query: types.CallbackQuery, state: FSMContext):
    answer = callback_query.data.split("_")[1]
    async with state.proxy() as data:
        data['q10'] = answer
    await TestStates.next()
    # ... –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –¥–ª—è q10 -> q11 ...
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        types.InlineKeyboardButton(text="a) –î–µ–ª–∞—Ç—å –∫—Ä–∞—Å–∏–≤—ã–µ –º–∞–∫–µ—Ç—ã –¥–ª—è —Å–∞–π—Ç–æ–≤/–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π üé®", callback_data="q11_a"),
        types.InlineKeyboardButton(text="b) –ü–∏—Å–∞—Ç—å —Å–ª–æ–∂–Ω—É—é –ª–æ–≥–∏–∫—É –∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã üñ•Ô∏è", callback_data="q11_b"),
        types.InlineKeyboardButton(text="c) –î–µ–ª–∞—Ç—å —Å–∞–π—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ –∏ –ü–ö üåê", callback_data="q11_c"),
        types.InlineKeyboardButton(text="d) –î–µ–ª–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è Android ü§ñ", callback_data="q11_d")
    )
    await bot.send_message(callback_query.from_user.id,
                           "–í–æ–ø—Ä–æ—Å 11: –ß—Ç–æ –∏–∑ —ç—Ç–æ–≥–æ —Ç—ã —Ö–æ—Ç–µ–ª –±—ã —É–º–µ—Ç—å? üí™",
                           reply_markup=keyboard)
    await callback_query.answer()


@dp.callback_query_handler(lambda c: c.data.startswith("q11_"), state=TestStates.question11)
async def process_q11(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ 11 –≤–æ–ø—Ä–æ—Å–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
    # ... (–ª–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è result - –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô) ...
    async with state.proxy() as data:
        # ---- –î–û–ë–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ q11 ----
        answer = callback_query.data.split("_")[1]
        data['q11'] = answer
        # -----------------------------------------
        answers = [data.get(f'q{i}') for i in range(1, 12)] # –¢–µ–ø–µ—Ä—å –¥–æ 12 –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ
        counts = {'a': 0, 'b': 0, 'c': 0, 'd': 0}
        for ans in answers:
            if ans in counts:
                counts[ans] += 1

        # –ï—Å–ª–∏ –µ—Å—Ç—å 'd', Android - –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        if counts.get('d', 0) > 0:
             direction = 'd'
        # –ò–Ω–∞—á–µ, –µ—Å–ª–∏ 'a' –∏ 'c' —Ä–∞–≤–Ω—ã –∏ –±–æ–ª—å—à–µ 'b', —Ç–æ Fullstack
        elif counts.get('a', 0) > 0 and counts.get('a', 0) == counts.get('c', 0) and counts.get('a', 0) > counts.get('b', 0):
            result = 'FullStack-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞' # –û—Ç–¥–µ–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è FullStack
        # –ò–Ω–∞—á–µ –≤—ã–±–∏—Ä–∞–µ–º –º–∞–∫—Å–∏–º—É–º
        else:
             # –ù–∞—Ö–æ–¥–∏–º –∫–ª—é—á —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º. –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∞–∫—Å–∏–º—É–º–æ–≤,
             # –≤–µ—Ä–Ω–µ—Ç—Å—è –æ–¥–∏–Ω –∏–∑ –Ω–∏—Ö (–ø–æ—Ä—è–¥–æ–∫ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω)
             non_d_counts = {k: v for k, v in counts.items() if k != 'd'}
             if not non_d_counts: # –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ 'd' –±—ã–ª–∏ –∏–ª–∏ –≤–æ–æ–±—â–µ –Ω–µ—Ç –æ—Ç–≤–µ—Ç–æ–≤
                 direction = 'd' # –ò–ª–∏ –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
             else:
                 direction = max(non_d_counts, key=non_d_counts.get)

        # –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –±—ã–ª 'FullStack', –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞—Ä—Ç—É
        if 'result' not in locals(): # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ —É–∂–µ –ø—Ä–∏—Å–≤–æ–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è result
            direction_map = {
                'a': 'UX/UI-–¥–∏–∑–∞–π–Ω',
                'b': 'Backend-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞',
                'c': 'Frontend-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞',
                'd': 'Android-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞'
            }
            result = direction_map.get(direction, '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ')


        user = callback_query.from_user
        conn = None # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º conn
        try:
            # ---- –ò–ó–ú–ï–ù–ï–ù–û ----
            conn = sqlite3.connect(DB_PATH) # –ò—Å–ø–æ–ª—å–∑—É–µ–º DB_PATH
            cursor = conn.cursor()
            cursor.execute('''INSERT INTO test_results
                            (first_name, last_name, username, result)
                            VALUES (?, ?, ?, ?)''',
                          (user.first_name,
                           user.last_name,
                           user.username,
                           result))
            conn.commit()
        except sqlite3.Error as e:
            logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ—Å—Ç–∞: {e}")
            await bot.send_message(callback_query.from_user.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤–∞—à–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.") # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await state.finish() # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            return # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏
        finally:
            if conn:
                conn.close()

    await state.finish()
    await bot.send_message(
        callback_query.from_user.id,
        f"üéâ –í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: *{result}*\n\n"
        "–ü–æ—Ö–æ–∂–µ, —ç—Ç–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–±–µ –ø–æ–¥—Ö–æ–¥–∏—Ç! üòâ\n"
        "–•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ? –ó–∞–≥–ª—è–Ω–∏ –≤ –Ω–∞—à –∫–∞—Ç–∞–ª–æ–≥!\n\n"
        "üëâ /catalog",
        parse_mode="Markdown"
    )
    await callback_query.answer() # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query


# –ö–æ–º–∞–Ω–¥–∞ /catalog ‚Äî –≤—ã–≤–æ–¥ –∫–∞—Ç–∞–ª–æ–≥–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π (–ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô)
@dp.message_handler(commands=['catalog'])
async def send_catalog(message: types.Message):
    result_text = "üìö *–ö–∞—Ç–∞–ª–æ–≥ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π:*\n\n"
    for direction, data in catalog_data.items():
        description, link = data
        result_text += (
            f"üîπ *{direction}*\n\n"
            f"{description}\n\n"
            f"üëâ [–ü–æ–¥—Ä–æ–±–Ω–µ–µ]({link})\n\n"
            f"{'-'*40}\n\n"
        )
    await message.reply(result_text, parse_mode="Markdown", disable_web_page_preview=True) # –î–æ–±–∞–≤–∏–ª disable_web_page_preview

# –ö–æ–º–∞–Ω–¥–∞ /subscribe
@dp.message_handler(commands=['subscribe'])
async def subscribe(message: types.Message):
    conn = None
    try:
        # ---- –ò–ó–ú–ï–ù–ï–ù–û ----
        conn = sqlite3.connect(DB_PATH) # –ò—Å–ø–æ–ª—å–∑—É–µ–º DB_PATH
        cursor = conn.cursor()
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º INSERT OR IGNORE –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –∏ –∞—Ç–æ–º–∞—Ä–Ω–æ—Å—Ç–∏
        cursor.execute("INSERT OR IGNORE INTO subscribers (user_id) VALUES (?)", (message.from_user.id,))
        # rowcount –ø–æ–∫–∞–∂–µ—Ç, –±—ã–ª–∞ –ª–∏ –≤—Å—Ç–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ (1) –∏–ª–∏ –∑–∞–ø–∏—Å—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª–∞ (0)
        if cursor.rowcount > 0:
            conn.commit()
            await message.reply("–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –Ω–æ–≤–æ—Å—Ç–∏! üì¢")
        else:
            await message.reply("–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –Ω–æ–≤–æ—Å—Ç–∏ üòä")
    except sqlite3.Error as e:
        logging.error(f"–û—à–∏–±–∫–∞ SQLite –≤ /subscribe: {e}")
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∫–µ.")
    finally:
        if conn:
            conn.close()


# –ö–æ–º–∞–Ω–¥–∞ /unsubscribe
@dp.message_handler(commands=['unsubscribe'])
async def unsubscribe(message: types.Message):
    conn = None
    try:
        # ---- –ò–ó–ú–ï–ù–ï–ù–û ----
        conn = sqlite3.connect(DB_PATH) # –ò—Å–ø–æ–ª—å–∑—É–µ–º DB_PATH
        cursor = conn.cursor()
        cursor.execute("DELETE FROM subscribers WHERE user_id = ?", (message.from_user.id,))
        conn.commit()
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ —Å—Ç—Ä–æ–∫–∞ —É–¥–∞–ª–µ–Ω–∞
        if cursor.rowcount > 0:
             await message.reply("–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π. üëã")
        else:
             await message.reply("–í—ã –∏ —Ç–∞–∫ –Ω–µ –±—ã–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω—ã. ü§î")
    except sqlite3.Error as e:
        logging.error(f"–û—à–∏–±–∫–∞ SQLite –≤ /unsubscribe: {e}")
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø–∏—Å–∫–µ.")
    finally:
        if conn:
            conn.close()


# –ö–æ–º–∞–Ω–¥–∞ /discounts
@dp.message_handler(commands=['discounts'])
async def send_discounts(message: types.Message):
    conn = None
    try:
        # ---- –ò–ó–ú–ï–ù–ï–ù–û ----
        conn = sqlite3.connect(DB_PATH) # –ò—Å–ø–æ–ª—å–∑—É–µ–º DB_PATH
        cursor = conn.cursor()
        # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç –≤ –ë–î —Å–æ–≤–º–µ—Å—Ç–∏–º —Å date('now') SQLite (YYYY-MM-DD)
        cursor.execute("SELECT description FROM discounts WHERE end_date >= date('now') ORDER BY end_date") # >= —á—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å
        discounts = cursor.fetchall()

        if discounts:
            discounts_text = "üî• *–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Å–∫–∏–¥–∫–∏ –∏ –∞–∫—Ü–∏–∏:*\n\n" + "\n\n".join([f"‚Ä¢ {d[0]}" for d in discounts])
        else:
            discounts_text = "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∫–∏–¥–æ–∫ –Ω–µ—Ç. –°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏! üòâ"
        await message.reply(discounts_text, parse_mode="Markdown")
    except sqlite3.Error as e:
        logging.error(f"–û—à–∏–±–∫–∞ SQLite –≤ /discounts: {e}")
        await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∫–∏–¥–∫–∞—Ö.")
    finally:
        if conn:
            conn.close()


if __name__ == '__main__':
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –ü–ï–†–ï–î –∑–∞–ø—É—Å–∫–æ–º –±–æ—Ç–∞
    create_tables()
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    executor.start_polling(dp, skip_updates=True)